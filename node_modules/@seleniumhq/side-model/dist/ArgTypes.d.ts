declare const argTypes: {
    readonly alertText: {
        readonly name: "alert text";
        readonly description: "text to check";
    };
    readonly answer: {
        readonly name: "answer";
        readonly description: "The answer to give in response to the prompt pop-up";
    };
    readonly attributeLocator: {
        readonly name: "attribute locator";
        readonly description: "An element locator followed by an @ sign and then the name of \n    the attribute, e.g. \"foo@bar\"";
    };
    readonly arrayVariableName: {
        readonly name: "array variable name";
        readonly description: "The name of a variable containing a JavaScript array";
    };
    readonly conditionalExpression: {
        readonly name: "conditional expression";
        readonly description: "JavaScript expression that returns a boolean result for use \n    in control flow commands";
    };
    readonly coord: {
        readonly name: "coord string";
        readonly description: "Specifies the x,y position (e.g., - 10,20) of the mouse event \n    relative to the element found from a locator";
    };
    readonly expectedValue: {
        readonly name: "expected value";
        readonly description: "The result you expect a variable to contain (e.g., true, false, \n    or some other value)";
    };
    readonly expression: {
        readonly name: "expression";
        readonly description: "The value you'd like to store";
    };
    readonly formLocator: {
        readonly name: "form locator";
        readonly description: "An element locator for the form you want to submit";
    };
    readonly handle: {
        readonly name: "window handle";
        readonly description: "A handle representing a specific page (tab, or window)";
    };
    readonly iteratorVariableName: {
        readonly name: "iterator variable name";
        readonly description: "The name of the variable used when iterating over a collection in a looping control flow command (e.g., for each)";
    };
    readonly json: {
        readonly name: "json";
        readonly description: "A string representation of a JavaScript object";
    };
    readonly keySequence: {
        readonly name: "key sequence";
        readonly description: "A sequence of keys to type, can be used to send key strokes (e.g. ${KEY_ENTER})";
    };
    readonly locator: {
        readonly name: "locator";
        readonly description: "An element locator";
    };
    readonly locatorOfDragDestinationObject: {
        readonly name: "locator of drag destination object";
        readonly description: "The locator of an element whose location (e.g., the center-most \n    pixel within it) will be the point where locator of object to be dragged is \n    dropped";
    };
    readonly locatorOfObjectToBeDragged: {
        readonly name: "locator of object to be dragged";
        readonly description: "The locator of element to be dragged";
    };
    readonly loopLimit: {
        readonly name: "loop limit";
        readonly description: "Maximum number of times a looping control flow command can execute to protect against infinite loops";
    };
    readonly message: {
        readonly name: "message";
        readonly description: "The message to print";
    };
    readonly optionLocator: {
        readonly name: "option";
        readonly description: "An option locator, typically just an option label (e.g. \"John Smith\")";
    };
    readonly pattern: {
        readonly name: "text";
        readonly description: "An exact string match. Support for pattern matching is in the \n    works. See https://github.com/SeleniumHQ/selenium-ide/issues/141 for details";
    };
    readonly region: {
        readonly name: "region";
        readonly description: "Specify a rectangle with coordinates and lengths (e.g., \"x: 257, \n    y: 300, width: 462, height: 280\")";
    };
    readonly resolution: {
        readonly name: "resolution";
        readonly description: "Specify a window resolution using WidthxHeight. (e.g., 1280x800)";
    };
    readonly script: {
        readonly name: "script";
        readonly description: "The JavaScript snippet to run";
    };
    readonly selectLocator: {
        readonly name: "select locator";
        readonly description: "An element locator identifying a drop-down menu";
    };
    readonly testCase: {
        readonly name: "test case";
        readonly description: "Test case name from the project";
    };
    readonly text: {
        readonly name: "text";
        readonly description: "The text to verify";
    };
    readonly times: {
        readonly name: "times";
        readonly description: "The number of attempts a times control flow loop will execute \n    the commands within its block";
    };
    readonly url: {
        readonly name: "url";
        readonly description: "The URL to open (may be relative or absolute)";
    };
    readonly value: {
        readonly name: "value";
        readonly description: "The value to type";
    };
    readonly variableName: {
        readonly name: "variable name";
        readonly description: "The name of a variable (without brackets). Used to either store \n    an expression's result in or reference for a check (e.g., with 'assert' or \n    'verify')";
    };
    readonly variableNameOptional: {
        readonly name: "variable name";
        readonly isOptional: true;
        readonly description: "The name of a variable (without brackets). Used to either store \n    an expression's result in or reference for a check (e.g., with 'assert' or \n    'verify')";
    };
    readonly waitTime: {
        readonly name: "wait time";
        readonly description: "The amount of time to wait (in milliseconds)";
    };
    readonly xpath: {
        readonly name: "xpath";
        readonly description: "The xpath expression to evaluate";
    };
};
export type ArgTypes = typeof argTypes;
export type ArgNames = ArgTypes[keyof ArgTypes]['name'];
export interface ArgType {
    name: ArgNames;
    description: string;
    isOptional?: boolean;
}
export default argTypes;
//# sourceMappingURL=ArgTypes.d.ts.map